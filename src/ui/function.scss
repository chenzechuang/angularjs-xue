// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key,
  $num in $map {
    @if $prev-num==null or unit($num)=="%"or unit($prev-num)=="%" {
      // Do nothing
    }

    @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    @else if $prev-num>=$num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  $values: map-values($map);
  $first-value: nth($values, 1);

  @if $first-value !=0 {
    @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
  }
}

@function tint-color($color, $level) {
  @return mix(white, $color, $level * $theme-color-interval);
}

@function shade-color($color, $level) {
  @return mix(black, $color, $level * $theme-color-interval);
}

// Helper function to replace negative values with 0
@function valid-radius($radius) {
  $return: ();

  @each $value in $radius {
    @if type-of($value)==number {
      $return: append($return, max($value, 0));
    }

    @else {
      $return: append($return, $value);
    }
  }

  @return $return;
}

@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: valid-radius($radius);
  }

  @else if $fallback-border-radius !=false {
    border-radius: $fallback-border-radius;
  }
}